-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)


fun evalIf(expr, stmts1, stmts2, c@[state, world]) {
  case evalExpr(state, expr) of
    0 -> eval(c, stmts2)
    | _ -> eval(c, stmts1)
  esac
}

fun eval (c@[state, world], stmt) {
  case stmt of 
      Assn (x, expr) -> [state <- [x, evalExpr(state, expr)], world]
    | Seq (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2)
    | Read (x) -> case readWorld(world) of [res, newWorld] -> [state <- [x, res], newWorld] esac
    | Write (expr) -> [state, writeWorld(evalExpr(state, expr), world)]
    | Skip -> c
    | If (expr, stmts1, stmts2) -> evalIf(expr, stmts1, stmts2, c)
    | While (expr, stmts) -> evalIf(expr, Seq(stmts, stmt), Skip, c)
    | DoWhile (stmts, expr) -> eval(eval(c, stmts), While (expr, stmts))
    | s -> failure ("Stmt eval not implemented\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}