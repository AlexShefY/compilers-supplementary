-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr (
          {
            [Left , {[s ("!!"), fun (l, op , r) { Binop (op, l, r)} ]}],
            [Left , {[s ("&&"), fun (l, op , r) { Binop (op, l, r)} ]}],
            [Nona , {[s ("=="), fun (l, op , r) { Binop (op, l, r)} ], 
            [s ("!="), fun (l, op , r) { Binop (op, l, r)} ], 
            [s (">"), fun (l, op , r) { Binop (op, l, r)} ], 
            [s ("<"), fun (l, op , r) { Binop (op, l, r)} ], 
            [s (">="), fun (l, op , r) { Binop (op, l, r)} ], 
            [s ("<="), fun (l, op , r) { Binop (op, l, r)} ]}],
            [Left , {[s ("+"), fun (l, op , r) { Binop (op, l, r)} ], 
            [s ("-"), fun (l, op , r) { Binop (op, l, r)} ]}],
            [Left , {[s ("*"), fun (l, op , r) { Binop (op, l, r)} ], 
            [s ("/"), fun (l, op , r) { Binop (op, l, r)} ], 
            [s ("%"), fun (l, op , r) { Binop (op, l, r)} ]}]
          }
          , primary
        );

var stmt = memo $ eta syntax (
  kRead x=inbr[s("("), lident, s(")")] {Read (x)} | 
  kWrite expr=inbr[s("("), exp, s(")")] {Write (expr)} | 
  kSkip {Skip} | 
  x=lident s[":="] e=exp { Assn (x, e) }
);


var stmts = memo $ eta syntax (stmt | s1=stmt s[";"] s2=stmts {Seq(s1, s2)});

-- Public top-level parser
public parse = stmts;
             
