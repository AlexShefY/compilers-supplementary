-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

fun addNamesVals (state, names, args) {
  foldl (fun (s, [name, arg]) {s.addName (name, arg)}, state, zip(names, args))
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addDefs (state, defs) {
  foldl( fun (s, def) {
    case def of
        Fun (name, args, body) -> addFunction(s, name, args, body)
      | Var (vars) -> addNames(s, vars)
    esac
  }, state, defs)
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Skip -> [c, None]
  | Ignore(e) -> case eval(c, e) of 
      [c, _] -> [c, None]  
    esac
  | Const(n) -> [c, n]
  | Var(x) -> [c, lookup(s, x)]
  | Ref(x) -> [c, Ref(x)]
  | Binop(op, l, r) -> 
    case evalList(c, {l, r}) of 
      [c, {lRes, rRes}] -> 
        [c, evalOp(op, lRes, rRes)]
    esac
  | Seq(l, r) -> 
    case evalList(c, {l, r}) of 
      [c, {_, rRes}] -> [c, rRes]
    esac
  | Read(x) -> 
    case readWorld(w) of 
      [res, w] -> [[s <- [x, res], w], None]
    esac
  | Write(e) -> 
    case eval(c, e) of 
      [c@[s, w], res] -> [[s, writeWorld(res, w)], None]    
    esac
  | If(cond, l, r) -> 
    case eval(c, cond) of 
      [c, resCond] -> eval(c, if resCond then l else r fi)
    esac 
  | While(cond, body) -> 
    case eval(c, cond) of 
      [c, resCond] -> if resCond then eval(c, Seq(body, expr)) else [c, None] fi 
    esac
  | DoWhile(body, cond) -> 
    case eval(c, body) of 
      [c, _] -> eval(c, While(cond, body))
    esac
  | Scope(defs, body) -> 
    case enterScope(s) of 
      s -> 
        case addDefs(s, defs) of 
          s -> 
            case eval([s, w], body) of 
              [[sr, wr], res] -> 
                [[leaveScope(sr), wr], res]
            esac
        esac
    esac   
  | Call(name, args) -> 
    case lookup(s, name) of 
      Fun (names, body) -> 
        case evalList(c, args) of
          [[s, w], vals] -> 
            case body of 
              External -> 
                case evalBuiltin(name, vals, w) of 
                  [res, w] -> [[s, w], res]
                esac
              | _ -> 
                case eval([addNamesVals(enterFunction(s), names, vals), w], body) of 
                  [[sr, wr], res] -> 
                    [[leaveFunction(s, getGlobal(sr)), wr], res]
                esac
            esac
      esac
    esac
  | Assn(x, e) ->  -- ? 
    case evalList(c, {x, e}) of 
      [c@[s, w], {l, r}] -> 
        case l of 
          ElemRef(a, i) -> 
            [[s, w], a[i] := r]
          | Ref(l) -> 
            [[s <- [l, r], w], r]
        esac
    esac
  | Set(x, expr) -> eval(c, Assn(Ref(x), expr))
  | String(s) -> 
    [c, s]
  | Array (elems) -> 
    case evalList(c, elems) of
      [c, vals] -> [c, listArray(vals)]
    esac
  | Sexp(name, elems) -> 
    case evalList(c, elems) of 
      [c, vals] -> [c, Sexp(name, listArray(vals))]
    esac
  | Elem(a, i) -> 
    case evalList(c, {a, i}) of
      [c, {a, i}] ->
        case a of
            Sexp(_, a) -> [c, a[i]]
          | _          -> [c, a[i]]
        esac
    esac
  | ElemRef(a, i) -> 
    case evalList(c, {a, i}) of
      [c, {a, i}] ->
        case a of
            Sexp(_, a) -> [c, ElemRef(a, i)]
          | _          -> [c, ElemRef(a, i)]
        esac
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
