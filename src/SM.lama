-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, cst, state, world], insns) { 
    -- failure ("%s at eval\n", showSM(insns));
    case insns of 
      { } -> c
    | insn : rest -> 
      case insn of 
        ST (x) -> state.assign(x, hd(stack)); eval(c, rest)
      | LD (x) -> eval([lookup(state, x) : stack, cst, state, world], rest)
      | CONST (x) -> eval([x : stack, cst, state, world], rest)

      | BINOP (op) -> 
        case stack of (y : (x : s)) -> eval([evalOp(op, x, y) : s, cst, state, world], rest) esac
      | READ -> 
        case readWorld(world) of [res, newWorld] -> eval([res : stack, cst, state, newWorld], rest) esac
      | WRITE -> case stack of (z : s) -> eval([s, cst, state, writeWorld(z, world)], rest) esac

      | JMP (l) -> eval(c, env.fromLabel(l))
      | LABEL (l) -> eval(c, rest)
      | CJMP("Z", l) -> 
        case stack of 
          h : stack -> eval([stack, cst, state, world], if h == 0 then env.fromLabel(l) else rest fi)
        esac
      | CJMP("NZ", l) -> 
        case stack of 
          h : stack -> eval([stack, cst, state, world], if h != 0 then env.fromLabel(l) else rest fi)
        esac
      
      | STI -> 
        case stack of 
          (y : x : stack) -> 
            state.assign(x, y); eval([y : stack, cst, state, world], rest)
        esac

      | LDA (x) -> 
        eval([x : stack, cst, state, world], rest)
      | DROP -> 
        eval([tl(stack), cst, state, world], rest)

      | GLOBAL (x) -> 
        state.assign(Glb(x), 0); eval([stack, cst, state, world], rest)
      | BEGIN (f, na, nl) -> 
        case take (stack, na) of
          [stack, args] -> 
            case foldl (fun ([state, na], arg) {state.assign(Arg(na), arg); [state, na + 1]}, [makeState(na, nl), 0], args) of 
              [state, _] -> eval([stack, cst, state, world], rest)
            esac
        esac
      | END -> 
        case cst of 
          {} -> [stack, {}, state, world]
        | [state, tail] : cst -> eval([stack, cst, state, world], tail)
        esac
      | CALL (name, na) -> 
        eval([stack, [state, rest] : cst, state, world], fromLabel(env, name))
      esac
    esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

fun addDefs(env, defs) {
  foldl (
    fun ([env, funs, globalDefs], def) {
      case def of 
        Fun (name, args, body) -> 
          case genFunLabel(env, name) of 
            [fLabel, env] -> [addFun (env, name, fLabel, args.size), [fLabel, args, body] : funs, globalDefs]
          esac
      | Var (vars) -> 
          [
            addVars (env, vars), 
            funs, 
            if env.isGlobal 
            then foldl (fun (globals, name) {globals <+ GLOBAL(name)}, globalDefs, vars)
            else globalDefs
            fi
          ]
      esac
    }, [beginScope(env), {}, emptyBuffer ()], defs
  )
} 

fun rememberFuns(env, funs) {
  foldl (
    fun (env, [fLabel, args, body]) {
      rememberFun(env, fLabel, args, body)
    }, 
    env, 
    funs
  )
}

public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)        -> 
      case env.genLabel of 
        [lab1, env] -> 
          case compile(lab1, env, e) of
            [used, env, code] -> [false, env, code <+> label(lab1, used) <+ DROP]
          esac
      esac
    | Assn (e1, e2)     -> 
      case env.genLabels(2) of 
        [leftL, rightL, env] -> 
          case compile(leftL, env, e1) of 
            [leftU, env, e1Code] -> 
              case compile(rightL, env, e2) of 
                [rightU, env, e2Code] -> 
                  [
                    false, 
                    env, 
                    e1Code <+> 
                    label(leftL, leftU) <+>
                    e2Code <+> 
                    label(rightL, rightU) <+
                    STI
                  ]
              esac
          esac
      esac
    | Read (x)          -> 
      [false, env, singletonBuffer(READ) <+ ST(lookupVar(env, x)) <+ DROP]
    | Write (e)         ->
      case env.genLabel of 
        [afterExpr, env] -> 
          case compile(afterExpr, env, e) of
            [eUsed, env, eCode] -> 
              [false, env, eCode <+> label(afterExpr, eUsed) <+ WRITE]
          esac
      esac
    | Seq (s1, s2)      -> 
      case env.genLabel of 
        [lab1, env] -> 
          case compile(lab1, env, s1) of 
            [used1, env, s1Code] -> 
              case compile(lab, env, s2) of 
                [used, env, s2Code] -> [used, env, s1Code <+> label(lab1, used1) <+> s2Code]
              esac
          esac
      esac
    | If (e, s1, s2)    ->
      case env.genLabels(2) of 
        [falseLabel, exprLabel, env] ->
          case compile(exprLabel, env, e) of 
            [eUsed, env, eCode] -> 
              case compile(lab, env, s1) of 
                [_, env, s1Code] -> 
                  case compile(lab, env, s2) of 
                    [_, env, s2Code] -> 
                      [true, env, eCode <+> label(exprLabel, eUsed) <+ CJMP("Z", falseLabel) <+> s1Code <+ JMP(lab) <+> label(falseLabel, true) <+> s2Code]
                  esac
              esac
          esac
      esac
    | DoWhile (s, e)    -> 
      case env.genLabels(3) of 
        [beforeBody, afterBody, afterExpr, env] ->
          case compile(afterBody, env, s) of 
            [usedAfter, env, sCode] -> 
              case compile(afterExpr, env, e) of 
                [usedExpr, env, eCode] -> 
                  [false, env, label(beforeBody, true) <+> sCode <+> label(afterBody, usedAfter) <+> eCode <+> label(afterExpr, usedExpr) <+ CJMP("NZ", beforeBody)]
              esac
          esac
      esac
    | While (e, s)      -> 
      case env.genLabels(3) of 
        [beforeBody, afterBody, afterExpr, env] -> 
          case compile(afterBody, env, s) of 
            [_, env, sCode] -> 
              case compile(afterExpr, env, e) of 
                [eUsed, env, eCode] -> 
                  [
                    false, env, 
                    singletonBuffer(JMP(afterBody)) <+> 
                    label(beforeBody, true) <+> 
                    sCode <+> 
                    label(afterBody, true) <+> 
                    eCode <+> 
                    label(afterExpr, eUsed) <+ 
                    CJMP("NZ", beforeBody)
                  ]
              esac
          esac
      esac
    | Binop(op, l, r) -> 
      case env.genLabels(2) of
        [afterL, afterR, env] -> 
          case compile(afterL, env, l) of 
            [lUsed, env, lCode] -> 
              case compile(afterR, env, r) of 
                [rUsed, env, rCode] -> 
                  [
                    false, 
                    env, 
                    lCode <+>
                    label(afterL, lUsed) <+>
                    rCode <+> 
                    label(afterR, rUsed) <+
                    BINOP(op)
                  ]
              esac          
          esac
      esac
    | Scope (defs, body) -> 
      case addDefs(env, defs) of 
        [env, funs, globalDefs] -> 
          case compile(lab, rememberFuns(env, funs), body) of 
            [flag, env, code] -> [flag, endScope(env), globalDefs <+> code] 
          esac
      esac
    | Call (name, args) -> 
      case env.genLabel of 
        [l, env] -> 
          case compile(l, env, foldl(fun(code, arg) {Seq(code, arg)}, Skip, args)) of 
            [used, env, argsCode] -> 
              case lookupFun(env, name) of 
                Fun (fLabel, nArgs) -> 
                  [false, env, argsCode <+> label(l, used) <+ CALL(fLabel, nArgs)]
              esac
          esac
      esac
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  fun compileFun(env, f@Fun(fLabel, args, body, state)) {
     case genLabel (addArgs (beginFun (env, state), args)) of 
      [lbl, env] -> 
        case compile (lbl, env, body) of 
          [lblUsed, env, code] -> 
            [env, singletonBuffer(LABEL (fLabel)) 
         <+ BEGIN (fLabel, size(args), getLocals(env))
         <+> code 
         <+> label (lbl, lblUsed)
         <+ END]
        esac
     esac 
  }

  fun compileFuns(env) {
    case getFuns(env) of 
      [{}, env] -> emptyBuffer ()
    | [funcs, env] -> 
        case foldl (fun([env, code], f) { 
          case compileFun(env, f) of 
            [env, fCode] -> [env, code <+> fCode]
          esac
        }, [env, emptyBuffer()], funcs) of 
          [env, code] -> code <+> compileFuns(env)
        esac 
    esac
  }

  case genLabel(initCompEnv()) of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
        --  [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
         [endLabUsed, env, code] -> getBuffer $ singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed) <+ END <+> compileFuns(env)
       esac
  esac
}

